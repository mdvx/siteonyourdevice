SET(HEADERS_GLOBAL
    tcp_server.h
    globals.h
    infos.h
    server/server_config.h
    fasto_application.h
    fasto_remote_application.h
    network_events.h
    network_controller.h
    http_config.h
)
SET(SOURCES_GLOBAL
    tcp_server.cpp
    infos.cpp
    fasto_application.cpp
    fasto_remote_application.cpp
    network_events.cpp
    network_controller.cpp
)

SET(HEADERS_COMMANDS
    commands/commands.h
)
SET(SOURCES_COMMANDS
    commands/commands.cpp
)

SET(HEADERS_HTTP
    http/http_streams.h
    http/http_client.h
    http/http_server.h
    http/http_server_handler.h
)
SET(SOURCES_HTTP
    http/http_streams.cpp
    http/http_client.cpp
    http/http_server.cpp
    http/http_server_handler.cpp
)

SET(HEADERS_INNER
    inner/http_inner_server_handler.h
    inner/http_inner_server.h
    inner/inner_server_command_seq_parser.h
)
SET(SOURCES_INNER
    inner/http_inner_server_handler.cpp
    inner/http_inner_server.cpp
    inner/inner_server_command_seq_parser.cpp
)

SET(HEADERS_HTTP_CALLBACKS
    http/callbacks/http_callbacks.h
    http/callbacks/file_system_callback.h
    http/callbacks/system_callback.h
)
SET(SOURCES_HTTP_CALLBACKS
    http/callbacks/http_callbacks.cpp
    http/callbacks/file_system_callback.cpp
    http/callbacks/system_callback.cpp
)

SET(SOURCES_SDS
    third-party/sds/sds.c
)

IF(NOT BUILD_CONSOLE)
    SET(PLATFORM_HDRS ${PLATFORM_HDRS} fasto_remote_gui_application.h)
    SET(PLATFORM_SRCS ${PLATFORM_SRCS} fasto_remote_gui_application.cpp)
    SET(PLATFORM_APP_HDRS ${PLATFORM_APP_HDRS} fasto_remote_gui_application.h)
    SET(PLATFORM_APP_SRCS ${PLATFORM_APP_SRCS} fasto_remote_gui_application.cpp)
    SET_DESKTOP_TARGET()
    ADD_DEFINITIONS(-DLOG_TO_FILE)
ENDIF(NOT BUILD_CONSOLE)

#RESOURCE_APP resources of application
IF(OS_WINDOWS)
    SET(PLATFORM_LIBRARIES ws2_32)

    IF(NOT BUILD_CONSOLE)
        SET(PLATFORM_HDRS ${PLATFORM_HDRS} platform/windows/gui_fasto_application.h)
        SET(PLATFORM_SRCS ${PLATFORM_SRCS} platform/windows/gui_fasto_application.cpp)
        SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES})
        SET(RESOURCE_APP "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/winapp.rc")
        SET(RESOURCES_DIR "${CMAKE_CURRENT_LIST_DIR}/resources/${PROJECT_NAME_LOWERCASE}")
        CONFIGURE_FILE(resources/win.rc.in ${RESOURCE_APP} @ONLY IMMEDIATE)
    ENDIF(NOT BUILD_CONSOLE)
ELSEIF(OS_MACOSX)
    IF(NOT BUILD_CONSOLE)
        FIND_LIBRARY(COCOA_LIBRARY Cocoa)

        SET(PLATFORM_APP_HDRS ${PLATFORM_APP_HDRS} platform/macosx/AppDelegate.h
            platform/macosx/gui_fasto_application.h)
        SET(PLATFORM_APP_SRCS ${PLATFORM_APP_SRCS} platform/macosx/AppDelegate.mm
            platform/macosx/gui_fasto_application.mm)
        SET(PLATFORM_APP_LIBRARIES ${PLATFORM_APP_LIBRARIES} ${COCOA_LIBRARY})
    ENDIF(NOT BUILD_CONSOLE)
ELSEIF(OS_LINUX OR OS_FREEBSD)
    IF(OS_LINUX)
        SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} rt)
    ENDIF(OS_LINUX)

    IF(NOT BUILD_CONSOLE)
        FIND_PACKAGE(PkgConfig REQUIRED)
        PKG_CHECK_MODULES(GTK2 REQUIRED gtk+-2.0)
        # Setup CMake to use GTK+, tell the compiler where to look for headers
        # and to the linker where to look for libraries
        SET(INCLUDE_DIRS ${INCLUDE_DIRS} ${GTK2_INCLUDE_DIRS})

        SET(PLATFORM_HDRS ${PLATFORM_HDRS} platform/linux/gui_fasto_application.h)
        SET(PLATFORM_SRCS ${PLATFORM_SRCS} platform/linux/gui_fasto_application.cpp)
        SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} ${GTK2_LIBRARIES})
    ENDIF(NOT BUILD_CONSOLE)
ELSEIF(OS_ANDROID)

ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
    SET(${PLATFORM_LIBRARIES} ${PLATFORM_LIBRARIES} pthread)
ENDIF(USE_PTHREAD)

ADD_SUBDIRECTORY(common)
ADD_SUBDIRECTORY(third-party/libev)
ADD_SUBDIRECTORY(third-party/ini)
ADD_SUBDIRECTORY(third-party/redis)
SET(INCLUDE_DIRS ${INCLUDE_DIRS} ${CMAKE_CURRENT_LIST_DIR} third-party/libev/src third-party/ini third-party/sds)
INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

SET(HEADERS ${HEADERS} ${HEADERS_GLOBAL} ${HEADERS_HTTP} ${HEADERS_INNER} ${HEADERS_HTTP_CALLBACKS} ${HEADERS_COMMANDS})
SET(SOURCES ${SOURCES} ${SOURCES_GLOBAL} ${SOURCES_HTTP} ${SOURCES_INNER} ${SOURCES_HTTP_CALLBACKS} ${SOURCES_COMMANDS})

SOURCE_GROUP("Header Files" FILES ${HEADERS})
SOURCE_GROUP("Source Files" FILES ${SOURCES})
SOURCE_GROUP("Platform Files" FILES ${PLATFORM_HDRS} ${PLATFORM_SRCS})
SOURCE_GROUP("Resources" FILES ${RESOURCE_APP} ${RESOURCE_OS})

SET(ALL_SOURCES ${ALL_SOURCES} ${HEADERS} ${SOURCES} ${PLATFORM_HDRS} ${PLATFORM_SRCS} ${SOURCES_SDS})
SET(ALL_LIBS ${ALL_LIBS} libev common inih ${PLATFORM_LIBRARIES})

SET(OBJECT_LIBS ${OBJECT_LIBS})

SET(EXE_SOURCES client_commands.h main.cpp ${PLATFORM_APP_HDRS} ${PLATFORM_APP_SRCS} ${RESOURCE_APP} ${ICON_FILE} ${RESOURCE_OS})
SET(PROJECT_EXE_LIBRARIES ${PROJECT_CORE_LIBRARY} ${PLATFORM_APP_LIBRARIES})

IF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)
    ADD_APP_LIBRARY_OBJECT(${PROJECT_CORE_LIBRARY} "${ALL_SOURCES}" "${ALL_LIBS}" "${OBJECT_LIBS}")
    IF(OS_ANDROID)
        ADD_APP_SHARED_LIBRARY(${PROJECT_NAME} "${EXE_SOURCES}" "${PROJECT_EXE_LIBRARIES}")
    ELSE()
        ADD_APP_EXECUTABLE(${PROJECT_NAME} "${EXE_SOURCES}" "${PROJECT_EXE_LIBRARIES}")
    ENDIF(OS_ANDROID)
ELSEIF(MSVC)
    ADD_APP_LIBRARY_OBJECT(${PROJECT_CORE_LIBRARY} "${ALL_SOURCES}" "${ALL_LIBS}" "${OBJECT_LIBS}")
    ADD_APP_EXECUTABLE(${PROJECT_NAME} "${EXE_SOURCES}" "${PROJECT_EXE_LIBRARIES}")
ELSE()
    MESSAGE(FATAL_ERROR "NOT SUPPORTED COMPILER!!!")
ENDIF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)

IF(OS_WINDOWS)
    SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES LANGUAGE RC)
ELSEIF(OS_MACOSX)
    SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
    SET_SOURCE_FILES_PROPERTIES(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
ENDIF(OS_WINDOWS)

GET_FILENAME_COMPONENT(ICON_FILE_NAME ${ICON_FILE} NAME)
IF(OS_MACOSX)
    SET(MACOSX_BUNDLE_BUNDLE_NAME ${PROJECT_NAME})
    SET(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME})
    SET(MACOSX_BUNDLE_INFO_STRING "${PROJECT_VERSION},${PROJECT_COPYRIGHT}" )
    SET(MACOSX_BUNDLE_SHORT_VERSION_STRING "${SHORT_VERSION}" )
    SET(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION})
    SET(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})
    SET(MACOSX_BUNDLE_COPYRIGHT ${PROJECT_COPYRIGHT})
    SET(MACOSX_BUNDLE_ICON_FILE ${ICON_FILE_NAME})
    SET(MACOSX_BUNDLE_PRINCIPAL_CLASS "NSApplication")
    #SET(MACOSX_MAIN_NIB_FILE "MainMenu")
ENDIF(OS_MACOSX)

IF(BUILD_SERVER)
    ADD_SUBDIRECTORY(server)
ENDIF(BUILD_SERVER)

# Start to install

VersionConf(${PROJECT_NAME} ${RESOURCE_OS_IN} ${RESOURCE_OS} ${ICON_FILE_NAME})
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)

INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE DESTINATION . COMPONENT LICENSE)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/COPYRIGHT DESTINATION . COMPONENT LICENSE)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/changelog.txt DESTINATION . COMPONENT LICENSE RENAME CHANGELOG)

# User specific
SET(USER_SPECIFIC_DEFAULT_PORT 8080)
SET(USER_SPECIFIC_DEFAULT_DOMAIN unknown)
SET(USER_SPECIFIC_DEFAULT_LOGIN anon)
SET(USER_SPECIFIC_DEFAULT_PASSWORD anon)
SET(USER_SPECIFIC_DEFAULT_PRIVATE_SITE 0)

ADD_DEFINITIONS(
    -DUSER_SPECIFIC_DEFAULT_PORT=${USER_SPECIFIC_DEFAULT_PORT}
    -DUSER_SPECIFIC_DEFAULT_DOMAIN="${USER_SPECIFIC_DEFAULT_DOMAIN}"
    -DUSER_SPECIFIC_DEFAULT_LOGIN="${USER_SPECIFIC_DEFAULT_LOGIN}"
    -DUSER_SPECIFIC_DEFAULT_PASSWORD="${USER_SPECIFIC_DEFAULT_PASSWORD}"
    -DUSER_SPECIFIC_DEFAULT_PRIVATE_SITE="${USER_SPECIFIC_DEFAULT_PRIVATE_SITE}"
)
CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/config.in"
                   "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE_NAME}" @ONLY IMMEDIATE)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT CONFIG)

INSTALL_RUNTIME_LIBRARIES()

IF(DEVELOPER_ENABLE_TESTS)
########## PREPARE GTEST LIBRARY ##########
    IF(MSVC)
        SET(gtest_force_shared_crt ON CACHE BOOL "Build shared gtest library")
        ADD_DEFINITIONS(-D_VARIADIC_MAX=10)
    ENDIF(MSVC)
    ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/tests/gtest gtest)
    INCLUDE_DIRECTORIES(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})
########## PREPARE GTEST LIBRARY ##########

    ADD_EXECUTABLE(unit_tests ${CMAKE_SOURCE_DIR}/tests/unit_test_http_clients.cpp)
    TARGET_LINK_LIBRARIES(unit_tests gtest gtest_main ${PROJECT_CORE_LIBRARY})

    ADD_TEST(NAME unit_tests COMMAND tests)
    SET_PROPERTY(TARGET unit_tests PROPERTY FOLDER "Unit tests")
ENDIF(DEVELOPER_ENABLE_TESTS)
